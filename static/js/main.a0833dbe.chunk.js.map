{"version":3,"sources":["Question.js","Parts.js","reportWebVitals.js","index.js"],"names":["Question","props","judgeColor","isAnswered","answer","type","id","label","htmlFor","name","data-answer","className","txt","Parts","state","score","currentQuestion","isCorrect","displayResult","obj","this","questions","sentence","quiz","option","text","value","data-end_quiz","onClick","next","check_the_answer","setState","div","document","querySelector","querySelectorAll","i","length","checked","correctResult","correctAmount","element","isChecked","dataset","push","addScore","result","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","console","log","data","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a0833dbe.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Question (props) {\n\n    let judgeColor; \n\n    if(! props.isAnswered){\n        judgeColor = null;\n    } else if(props.isAnswered && props.answer == \"correct\") {\n        judgeColor = \"green\";\n    } else {\n        judgeColor = \"red\";\n    }\n\n    return (\n        <div>\n            <input type=\"checkbox\"  id={props.label} />\n            <label htmlFor={props.label} name=\"label\" data-answer={props.answer} className={judgeColor}>{props.txt} </label>\n        </div>\n    );\n}\n\nexport default Question;\n","import React from 'react';\nimport Question from './Question';\n\nclass Parts extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            currentQuestion: 1,\n            isAnswered: false,\n            isCorrect: false,\n        }\n    }\n    \n    render(){\n        const obj = this.props.questions[this.state.currentQuestion];\n        if(! obj) {\n            return (\n                <div>\n                    <p>正解数 {this.state.score}</p>\n                    <p>終わり！！！</p>\n                </div>\n            )\n        }\n\n        let displayResult ;\n        if (this.state.isCorrect && this.state.isAnswered) {\n            displayResult = <p> 正解やったね！！</p>\n        } else if (! this.state.isCorrect && this.state.isAnswered) {\n            displayResult = <p> 間違い、ブッブーXXX</p>\n        }\n\n        const sentence = obj.quiz; \n        const option = obj.option;\n\n        return(\n        <div>\n            <p>第{this.state.currentQuestion}問</p>\n            {displayResult}\n            <p>{sentence}</p>\n                {/* {this.renderingQuestions(option)} */}\n                {/* 以下を動的にしたい！！！！ */}\n                <div className=\"answer-column\">\n                    <Question label={option[0].label} txt={option[0].text} answer={option[0].answer} isAnswered={this.state.isAnswered} />\n                    <Question label={option[1].label} txt={option[1].text} answer={option[1].answer} isAnswered={this.state.isAnswered} />\n                    <Question label={option[2].label} txt={option[2].text} answer={option[2].answer} isAnswered={this.state.isAnswered} />\n                    <Question label={option[3].label} txt={option[3].text} answer={option[3].answer} isAnswered={this.state.isAnswered} />\n                    <Question label={option[4].label} txt={option[4].text} answer={option[4].answer} isAnswered={this.state.isAnswered} />\n                </div>\n\n                <div id=\"add_button\">\n                    <input type=\"button\" value=\"次の問題\" id=\"next\" data-end_quiz=\"5\" onClick={ () => this.next()}/>\n                    <input type=\"button\" value=\"答え\" onClick={() => this.check_the_answer(option)} />\n                </div>\n        </div>\n        );\n    }\n\n    next() {\n        this.setState({\n            currentQuestion: this.state.currentQuestion + 1,\n            isAnswered: false\n        });\n\n        const element = document.querySelector('.answer-column');\n        const div = element.querySelectorAll('div');\n\n        for(let i = 0; i < div.length; i++){\n            div[i].querySelectorAll('input')[0].checked = false ;\n        }\n    }\n\n    // 設定された正解数と、選択した正解すうが一致していれば、加点する\n    check_the_answer(option) {\n        let correctResult = [];\n        let correctAmount = [];\n        const element = document.querySelector('.answer-column');\n\n        for(let i = 0; i < option.length; i++){\n            const div = element.querySelectorAll('div')[i];\n            const isChecked = div.querySelectorAll('input')[0].checked;\n            const isCorrect = div.querySelectorAll('label')[0].dataset.answer == \"correct\";\n\n            if(isCorrect) correctAmount.push(isCorrect);\n            if (isChecked && isCorrect)  correctResult.push(true);\n        }\n\n        //選択した正解数の比較\n        let addScore = 0;\n        let result = false;\n        if(correctResult.length == correctAmount.length) {\n            addScore = 1;\n            result = true;\n        }\n\n        this.setState({ \n            score: this.state.score + addScore, \n            isAnswered: true,\n            isCorrect: result \n        })\n    }\n\n    // renderingQuestions (option) {\n    //     for(let i = 0; i < option.length; i ++) {\n    //         const element = option[i];\n    //         const label = element.label;\n    //         const txt = element.text;\n    //         const answer = element.answer;\n    //         <Question label={label} txt={txt} answer={answer}/>\n    //     }\n    // }\n}\n\nexport default Parts;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Parts from './Parts';\nimport reportWebVitals from './reportWebVitals';\nimport data from './data.json';\n\n\nconsole.log(data)\nReactDOM.render(\n\n  <React.StrictMode>\n    <Parts questions={data}/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}